#MERCURY 1
import pandas as pd

#GLOBAL VARIABLES
__AAPL__ = "D:\Dropbox\9. Data\Mercury Data\ciq_aapl_values.csv"

selectedFeatures = ['DATE',
'IQ_LASTSALEPRICE',
'IQ_PRICEDATE',
'IQ_HIGHPRICE',
'IQ_LOWPRICE',
'IQ_OPENPRICE',
'IQ_CLOSEPRICE',
'IQ_CLOSEPRICE_ADJ',
'IQ_VWAP',
'IQ_EQUITY_BIDPRICE',
'IQ_EQUITY_ASKPRICE',
'IQ_EQUITY_MIDPRICE',
'IQ_YEARHIGH',
'IQ_YEARLOW',
'IQ_VOLUME',
'IQ_VALUE_TRADED',
'IQ_MARKETCAP',
'IQ_CLASS_MARKETCAP',
'IQ_TEV',
'IQ_SHARESOUTSTANDING',
'IQ_CLASS_SHARESOUTSTANDING',
'IQ_BETA_5YR',
'IQ_BETA_2YR',
'IQ_BETA_1YR',
'IQ_BETA_5YR_RSQ',
'IQ_BETA_2YR_RSQ',
'IQ_BETA_1YR_RSQ',
'IQ_PRICE_VOL_HIST_5YR',
'IQ_PRICE_VOL_HIST_2YR',
'IQ_PRICE_VOL_HIST_YR',
'IQ_PRICE_VOL_HIST_6MTH',
'IQ_PRICE_VOL_HIST_3MTH',
'IQ_DIVIDEND_YIELD',
'IQ_ANNUALIZED_DIVIDEND',
'IQ_SHORT_INTEREST',
'IQ_SHORT_INTEREST_PERCENT',
'IQ_DIV_AMOUNT',
'IQ_NEXT_DIV_AMOUNT',
'IQ_VOL_LAST_WK',
'IQ_VOL_LAST_MTH',
'IQ_VOL_LAST_3MTH',
'IQ_VOL_LAST_6MTH',
'IQ_VOL_LAST_YR',
'IQ_VALUE_TRADED_LAST_WK',
'IQ_VALUE_TRADED_LAST_MTH',
'IQ_VALUE_TRADED_LAST_3MTH',
'IQ_VALUE_TRADED_LAST_6MTH',
'IQ_VALUE_TRADED_LAST_YR',
'IQ_RSI',
'IQ_RSI_ADJ',
'IQ_RETURN_ASSETS',
'IQ_RETURN_CAPITAL',
'IQ_RETURN_INVESTED_CAPITAL',
'IQ_RETURN_EQUITY',
'IQ_RETURN_COMMON_EQUITY',
'IQ_GROSS_MARGIN',
'IQ_SGA_MARGIN',
'IQ_EBITDA_MARGIN',
'IQ_EBITA_MARGIN',
'IQ_EBIT_MARGIN',
'IQ_NI_NORM_MARGIN',
'IQ_ASSET_TURNS',
'IQ_CURRENT_RATIO',
'IQ_QUICK_RATIO',
'IQ_Z_SCORE',
'IQ_TOTAL_REV_1YR_ANN_GROWTH',
'IQ_GP_1YR_ANN_GROWTH',
'IQ_EBITA_1YR_ANN_GROWTH',
'IQ_EBIT_1YR_ANN_GROWTH',
'IQ_NI_NORM_1YR_ANN_GROWTH',
'IQ_DPS_1YR_ANN_GROWTH',
'IQ_ACCT_RECV_1YR_ANN_GROWTH',
'IQ_COMMON_EQUITY_1YR_ANN_GROWTH',
'IQ_TBV_1YR_ANN_GROWTH',
'IQ_TOTAL_ASSETS_1YR_ANN_GROWTH',
'IQ_TOTAL_REV_2YR_ANN_CAGR',
'IQ_GP_2YR_ANN_CAGR',
'IQ_EBITA_2YR_ANN_CAGR',
'IQ_EBIT_2YR_ANN_CAGR',
'IQ_NI_NORM_2YR_ANN_CAGR',
'IQ_DPS_2YR_ANN_CAGR',
'IQ_ACCT_RECV_2YR_ANN_CAGR',
'IQ_COMMON_EQUITY_2YR_ANN_CAGR',
'IQ_TBV_2YR_ANN_CAGR',
'IQ_TOTAL_ASSETS_2YR_ANN_CAGR',
'IQ_TOTAL_REV_3YR_ANN_CAGR',
'IQ_GP_3YR_ANN_CAGR',
'IQ_EBITA_3YR_ANN_CAGR',
'IQ_EBIT_3YR_ANN_CAGR',
'IQ_NI_NORM_3YR_ANN_CAGR',
'IQ_DPS_3YR_ANN_CAGR',
'IQ_ACCT_RECV_3YR_ANN_CAGR',
'IQ_COMMON_EQUITY_3YR_ANN_CAGR',
'IQ_TBV_3YR_ANN_CAGR',
'IQ_TOTAL_ASSETS_3YR_ANN_CAGR',
'IQ_TOTAL_REV_5YR_ANN_CAGR',
'IQ_GP_5YR_ANN_CAGR',
'IQ_NI_NORM_5YR_ANN_CAGR',
'IQ_DPS_5YR_ANN_CAGR',
'IQ_ACCT_RECV_5YR_ANN_CAGR',
'IQ_COMMON_EQUITY_5YR_ANN_CAGR',
'IQ_TBV_5YR_ANN_CAGR',
'IQ_TOTAL_ASSETS_5YR_ANN_CAGR',
'IQ_TOTAL_REV_7YR_ANN_CAGR',
'IQ_GP_7YR_ANN_CAGR',
'IQ_ACCT_RECV_7YR_ANN_CAGR',
'IQ_COMMON_EQUITY_7YR_ANN_CAGR',
'IQ_TBV_7YR_ANN_CAGR',
'IQ_TOTAL_ASSETS_7YR_ANN_CAGR',
'IQ_TOTAL_REV_10YR_ANN_CAGR',
'IQ_GP_10YR_ANN_CAGR',
'IQ_DPS_10YR_ANN_CAGR',
'IQ_ACCT_RECV_10YR_ANN_CAGR',
'IQ_COMMON_EQUITY_10YR_ANN_CAGR',
'IQ_TBV_10YR_ANN_CAGR',
'IQ_TOTAL_ASSETS_10YR_ANN_CAGR',
'IQ_TEV_TOTAL_REV',
'IQ_TEV_EBIT',
'IQ_TEV_EBIT_OUT',
'IQ_TEV_EBIT_EXER',
'IQ_PRICE_SALES',
'IQ_PE_NORMALIZED',
'IQ_PBV',
'IQ_PTBV',
'IQ_MKTCAP_TOTAL_REV',
'IQ_MKTCAP_TOTAL_REV_OUT',
'IQ_MKTCAP_TOTAL_REV_EXER',
'IQ_MKTCAP_EBT_EXCL',
'IQ_MKTCAP_EBT_EXCL_OUT',
'IQ_MKTCAP_EBT_EXCL_EXER',
'IQ_EST_NUM_HIGH_REC',
'IQ_EST_NUM_NEUTRAL_REC',
'IQ_PRICE_TARGET',
'IQ_MEDIAN_TARGET_PRICE',
'IQ_HIGH_TARGET_PRICE',
'IQ_LOW_TARGET_PRICE',
'IQ_TARGET_PRICE_NUM']

class DataGenerator:

    def __init__(self,fname):
        self.createDf(fname)


    def createDf(self,fname):
        print("----Creating Dataframe from CSV----")
        df = pd.read_csv(fname,low_memory=False)
        print("----Date Reformatted----")

        df['DATE'] = pd.to_datetime(df['DATE'])
        print("----Date Reformatted----")

        df = df[selectedFeatures]
        df.describe(include='all').to_csv("Unscaled Feature Description.csv")
        print("----Unscaled Features Description Saved Under Feature Description.csv----")

        self.features = df.loc[:,df.columns!='DATE'].values
        self.dates=df.loc[:,'DATE'].values.reshape(-1,1)
        self.prices = df.loc[:, 'IQ_LASTSALEPRICE'].values.reshape(-1,1)

        self.features.normalize()
        self.prices.createTargets()

    def normalize(self):
        return None

    def createTargets(self):
        return None


df_aapl = DataGenerator(__AAPL__)
print(df_aapl.features.shape)






